/*
** Copyright (c) 2006 Christopher Davis
** 
** Permission is hereby granted, free of charge, to any person obtaining a copy of
** this software and associated documentation files (the "Software"), to deal in 
** the Software without restriction, including without limitation the rights to 
** use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
** the Software, and to permit persons to whom the Software is furnished to do so,
** subject to the following conditions:
** 
** The above copyright notice and this permission notice shall be included in all 
** copies or substantial portions of the Software.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
** FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
** COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER 
** IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
** CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
** 
** $Id$
*/



//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: fragmon.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
    #pragma implementation "fragmon_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "fragmon_wdr.h"


// Euro sign hack of the year
#if wxUSE_UNICODE
    #define __WDR_EURO__ wxT("\u20ac")
#else
    #if defined(__WXMAC__)
        #define __WDR_EURO__ wxT("\xdb")
    #elif defined(__WXMSW__)
        #define __WDR_EURO__ wxT("\x80")
    #else
        #define __WDR_EURO__ wxT("\xa4")
    #endif
#endif

// Custom source
#include "ServerEntry.h"

// Implement window functions

wxSizer *IRCInputFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticBox *item3 = new wxStaticBox( parent, -1, wxT("IRC Server") );
    wxStaticBoxSizer *item2 = new wxStaticBoxSizer( item3, wxHORIZONTAL );

    wxFlexGridSizer *item4 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, wxT("Server"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    ServerEntry *item6 = new ServerEntry( parent, ID_IRC_SERV_IN, wxT(""), wxDefaultPosition, wxSize(160,-1), 0 );
    item4->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item7 = new wxCheckBox( parent, ID_IRC_PASS_CHK, wxT("&Password"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item8 = new wxTextCtrl( parent, ID_IRC_PASS_IN, wxT(""), wxDefaultPosition, wxSize(160,-1), wxTE_PASSWORD );
    item8->Enable( false );
    item4->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    item4->Add( 20, 10, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item4->Add( 20, 10, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxStaticText *item9 = new wxStaticText( parent, ID_TEXT, wxT("User Name"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item10 = new wxTextCtrl( parent, ID_IRC_USER_IN, wxT(""), wxDefaultPosition, wxSize(160,-1), 0 );
    item4->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, wxT("Real Name"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item12 = new wxTextCtrl( parent, ID_IRC_REAL_IN, wxT(""), wxDefaultPosition, wxSize(160,-1), 0 );
    item4->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item2, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxBoxSizer *item13 = new wxBoxSizer( wxVERTICAL );

    wxStaticBox *item15 = new wxStaticBox( parent, -1, wxT("Nick Choices") );
    wxStaticBoxSizer *item14 = new wxStaticBoxSizer( item15, wxHORIZONTAL );

    wxFlexGridSizer *item16 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item17 = new wxStaticText( parent, ID_TEXT, wxT("1."), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item18 = new wxTextCtrl( parent, ID_IRC_NICK1_IN, wxT("Fragmon"), wxDefaultPosition, wxSize(160,-1), 0 );
    item16->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item19 = new wxStaticText( parent, ID_TEXT, wxT("2."), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item20 = new wxTextCtrl( parent, ID_IRC_NICK2_IN, wxT(""), wxDefaultPosition, wxSize(160,-1), 0 );
    item16->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item21 = new wxStaticText( parent, ID_TEXT, wxT("3."), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item22 = new wxTextCtrl( parent, ID_IRC_NICK3_IN, wxT(""), wxDefaultPosition, wxSize(160,-1), 0 );
    item16->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    item14->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    item13->Add( item14, 0, wxGROW|wxALL, 5 );

    item1->Add( item13, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item23 = new wxBoxSizer( wxHORIZONTAL );

    item23->Add( 10, 20, 0, wxALIGN_CENTER, 5 );

    wxButton *item24 = new wxButton( parent, wxID_OK, wxT("C&onnect"), wxDefaultPosition, wxDefaultSize, 0 );
    item24->SetDefault();
    item23->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    item23->Add( 10, 20, 0, wxALIGN_CENTER, 5 );

    wxButton *item25 = new wxButton( parent, wxID_CANCEL, wxT("&Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item23->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *QueryInputFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    wxFlexGridSizer *item1 = new wxFlexGridSizer( 2, 0, 0 );

    item1->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, wxT("Game Server / Type"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_BOTTOM|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxButton *item3 = new wxButton( parent, ID_SERV_QUERY, wxT("Ping"), wxDefaultPosition, wxSize(50,-1), 0 );
    item1->Add( item3, 0, wxALIGN_CENTER, 5 );

    ServerEntry *item4 = new ServerEntry( parent, ID_SERV_IN, wxT(""), wxDefaultPosition, wxSize(190,-1), wxTE_PROCESS_ENTER );
    item1->Add( item4, 0, wxALIGN_CENTER_HORIZONTAL, 5 );

    wxButton *item5 = new wxButton( parent, ID_SERV_PLAY, wxT("Play"), wxDefaultPosition, wxSize(50,-1), 0 );
    item1->Add( item5, 0, wxALIGN_CENTER, 5 );

    wxString *strs6 = (wxString*) NULL;
    wxChoice *item6 = new wxChoice( parent, ID_SERV_TYPE, wxDefaultPosition, wxSize(190,-1), 0, strs6, 0 );
    item1->Add( item6, 0, wxALIGN_CENTER_HORIZONTAL|wxBOTTOM, 5 );

    wxBoxSizer *item7 = new wxBoxSizer( wxVERTICAL );

    wxButton *item8 = new wxButton( parent, ID_SERV_COPY, wxT("Copy"), wxDefaultPosition, wxSize(50,-1), 0 );
    item7->Add( item8, 0, wxALIGN_CENTER|wxBOTTOM, 5 );

    wxButton *item9 = new wxButton( parent, ID_SERV_SAVE, wxT("Add"), wxDefaultPosition, wxSize(50,-1), 0 );
    item7->Add( item9, 0, wxALIGN_CENTER_HORIZONTAL|wxBOTTOM, 5 );

    wxButton *item10 = new wxButton( parent, ID_SERV_EDIT, wxT("Edit"), wxDefaultPosition, wxSize(50,-1), 0 );
    item7->Add( item10, 0, wxALIGN_CENTER_HORIZONTAL|wxBOTTOM, 5 );

    wxButton *item11 = new wxButton( parent, ID_DEL, wxT("Del"), wxDefaultPosition, wxSize(50,-1), 0 );
    item7->Add( item11, 0, wxALIGN_CENTER, 5 );

    item1->Add( item7, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxString *strs12 = (wxString*) NULL;
    wxListBox *item12 = new wxListBox( parent, ID_SERV_LIST, wxDefaultPosition, wxSize(190,140), 0, strs12, wxLB_SINGLE|wxLB_SORT );
    item1->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER_HORIZONTAL, 5 );

    wxStaticLine *item13 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(-1,230), wxLI_VERTICAL );
    item0->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item14 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item15 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item16 = new wxStaticText( parent, ID_TEXT, wxT("Hostname"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    item15->Add( 10, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxWindow *item17 = parent->FindWindow( ID_PASSLOCK );
    wxASSERT( item17 );
    item15->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    item14->Add( item15, 0, wxALIGN_CENTER, 5 );

    wxTextCtrl *item18 = new wxTextCtrl( parent, ID_SERV_HOST, wxT(""), wxDefaultPosition, wxSize(280,-1), wxTE_READONLY|wxTE_CENTRE );
    item18->SetBackgroundColour( *wxLIGHT_GREY );
    item14->Add( item18, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxFlexGridSizer *item19 = new wxFlexGridSizer( 4, 0, 0 );

    wxStaticText *item20 = new wxStaticText( parent, ID_TEXT, wxT("Ping"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item20, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item21 = new wxTextCtrl( parent, ID_SERV_PING, wxT(""), wxDefaultPosition, wxSize(40,-1), wxTE_READONLY );
    item21->SetBackgroundColour( *wxLIGHT_GREY );
    item19->Add( item21, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item22 = new wxStaticText( parent, ID_TEXT, wxT("Map"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item22, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item23 = new wxTextCtrl( parent, ID_SERV_MAP, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item23->SetBackgroundColour( *wxLIGHT_GREY );
    item19->Add( item23, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item24 = new wxStaticText( parent, ID_TEXT, wxT("Players"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item24, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item25 = new wxTextCtrl( parent, ID_SERV_PLAYERS, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item25->SetBackgroundColour( *wxLIGHT_GREY );
    item19->Add( item25, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item26 = new wxStaticText( parent, ID_TEXT, wxT("Type"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item26, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item27 = new wxTextCtrl( parent, ID_SERV_GTYPE, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item27->SetBackgroundColour( *wxLIGHT_GREY );
    item19->Add( item27, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item14->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    wxFlexGridSizer *item28 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item29 = new wxStaticText( parent, ID_TEXT, wxT("Mod"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item29, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item30 = new wxTextCtrl( parent, ID_SERV_MOD, wxT(""), wxDefaultPosition, wxSize(210,-1), wxTE_READONLY );
    item30->SetBackgroundColour( *wxLIGHT_GREY );
    item28->Add( item30, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item31 = new wxStaticText( parent, ID_TEXT, wxT("Version"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item31, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item32 = new wxTextCtrl( parent, ID_SERV_VERS, wxT(""), wxDefaultPosition, wxSize(210,-1), wxTE_READONLY );
    item32->SetBackgroundColour( *wxLIGHT_GREY );
    item28->Add( item32, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item14->Add( item28, 0, wxALIGN_CENTER, 5 );

    item0->Add( item14, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *ExecInputFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticBox *item3 = new wxStaticBox( parent, -1, wxT("Game") );
    wxStaticBoxSizer *item2 = new wxStaticBoxSizer( item3, wxHORIZONTAL );

    wxString *strs4 = (wxString*) NULL;
    wxChoice *item4 = new wxChoice( parent, ID_EXEC_TYPE, wxDefaultPosition, wxSize(240,-1), 0, strs4, 0 );
    item2->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item2, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxStaticBox *item6 = new wxStaticBox( parent, -1, wxT("Executable Path") );
    wxStaticBoxSizer *item5 = new wxStaticBoxSizer( item6, wxHORIZONTAL );

    wxBoxSizer *item7 = new wxBoxSizer( wxHORIZONTAL );

    wxTextCtrl *item8 = new wxTextCtrl( parent, ID_EXEC_PATH_IN, wxT(""), wxDefaultPosition, wxSize(210,-1), 0 );
    item7->Add( item8, 0, wxALIGN_CENTER|wxLEFT|wxTOP|wxBOTTOM, 5 );

    wxButton *item9 = new wxButton( parent, ID_EXEC_GETPATH, wxT("..."), wxDefaultPosition, wxSize(30,-1), 0 );
    item7->Add( item9, 0, wxALIGN_CENTER, 5 );

    item5->Add( item7, 0, wxALIGN_CENTER_VERTICAL, 5 );

    item1->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item11 = new wxStaticBox( parent, -1, wxT("Execution Options") );
    wxStaticBoxSizer *item10 = new wxStaticBoxSizer( item11, wxHORIZONTAL );

    wxFlexGridSizer *item12 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item13 = new wxStaticText( parent, ID_TEXT, wxT("Order"), wxDefaultPosition, wxDefaultSize, 0 );
    item12->Add( item13, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item14 = new wxTextCtrl( parent, ID_EXEC_ORDER_IN, wxT(""), wxDefaultPosition, wxSize(500,-1), 0 );
    item12->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item15 = new wxStaticText( parent, ID_TEXT, wxT("Connection"), wxDefaultPosition, wxDefaultSize, 0 );
    item12->Add( item15, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item16 = new wxTextCtrl( parent, ID_EXEC_CONN_IN, wxT(""), wxDefaultPosition, wxSize(500,-1), 0 );
    item12->Add( item16, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item17 = new wxStaticText( parent, ID_TEXT, wxT("Password"), wxDefaultPosition, wxDefaultSize, 0 );
    item12->Add( item17, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item18 = new wxTextCtrl( parent, ID_EXEC_PASS_IN, wxT(""), wxDefaultPosition, wxSize(500,-1), 0 );
    item12->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item19 = new wxStaticText( parent, ID_TEXT, wxT("Name"), wxDefaultPosition, wxDefaultSize, 0 );
    item12->Add( item19, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item20 = new wxTextCtrl( parent, ID_EXEC_NAME_IN, wxT(""), wxDefaultPosition, wxSize(500,-1), 0 );
    item12->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    item10->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item10, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item22 = new wxStaticBox( parent, -1, wxT("Example") );
    wxStaticBoxSizer *item21 = new wxStaticBoxSizer( item22, wxVERTICAL );

    wxTextCtrl *item23 = new wxTextCtrl( parent, ID_EXEC_EX, wxT(""), wxDefaultPosition, wxSize(590,40), wxTE_MULTILINE|wxTE_READONLY|wxHSCROLL );
    item23->SetForegroundColour( *wxBLUE );
    item23->SetBackgroundColour( *wxLIGHT_GREY );
    item21->Add( item23, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item21, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *CopyFmtFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticBox *item2 = new wxStaticBox( parent, -1, wxT("Query Copy Format") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxVERTICAL );

    wxTextCtrl *item3 = new wxTextCtrl( parent, ID_CFMT_IN, wxT(""), wxDefaultPosition, wxSize(600,-1), 0 );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticBox *item5 = new wxStaticBox( parent, -1, wxT("Example") );
    wxStaticBoxSizer *item4 = new wxStaticBoxSizer( item5, wxVERTICAL );

    wxTextCtrl *item6 = new wxTextCtrl( parent, ID_CFMT_EX, wxT(""), wxDefaultPosition, wxSize(600,40), wxTE_MULTILINE|wxHSCROLL );
    item6->SetBackgroundColour( *wxLIGHT_GREY );
    item4->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *QueryOptsFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxFlexGridSizer *item1 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, wxT("Default Game"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString *strs3 = (wxString*) NULL;
    wxChoice *item3 = new wxChoice( parent, ID_DEF_GM, wxDefaultPosition, wxSize(190,-1), 0, strs3, 0 );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, wxT("Query Timeout"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item5 = new wxTextCtrl( parent, ID_QUERY_TO, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *CompOutputFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxTextCtrl *item2 = new wxTextCtrl( parent, ID_COMP_NAME_A, wxT(""), wxDefaultPosition, wxSize(120,-1), wxTE_CENTRE );
    item1->Add( item2, 0, wxALIGN_CENTER, 5 );

    wxStaticBitmap *item3 = new wxStaticBitmap( parent, ID_STATICBITMAP, TeamsFunc( 0 ), wxDefaultPosition, wxDefaultSize );
    item1->Add( item3, 0, wxALIGN_CENTER, 5 );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, wxT("Vs."), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticBitmap *item5 = new wxStaticBitmap( parent, ID_STATICBITMAP, TeamsFunc( 1 ), wxDefaultPosition, wxDefaultSize );
    item1->Add( item5, 0, wxALIGN_CENTER, 5 );

    wxTextCtrl *item6 = new wxTextCtrl( parent, ID_COMP_NAME_B, wxT(""), wxDefaultPosition, wxSize(120,-1), wxTE_CENTRE );
    item1->Add( item6, 0, wxALIGN_CENTER, 5 );

    item1->Add( 7, 10, 0, wxALIGN_CENTER, 5 );

    wxTextCtrl *item7 = new wxTextCtrl( parent, ID_COMP_SCORE_A, wxT(""), wxDefaultPosition, wxSize(40,-1), wxTE_CENTRE );
    item1->Add( item7, 0, wxALIGN_CENTER, 5 );

    wxStaticLine *item8 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(10,-1), wxLI_HORIZONTAL );
    item1->Add( item8, 0, wxALIGN_CENTER, 5 );

    wxTextCtrl *item9 = new wxTextCtrl( parent, ID_COMP_SCORE_B, wxT(""), wxDefaultPosition, wxSize(40,-1), wxTE_CENTRE );
    item1->Add( item9, 0, wxALIGN_CENTER, 5 );

    item1->Add( 7, 10, 0, wxALIGN_CENTER, 5 );

    wxTextCtrl *item10 = new wxTextCtrl( parent, ID_COMP_TIME, wxT(""), wxDefaultPosition, wxSize(90,-1), wxTE_CENTRE );
    item1->Add( item10, 0, wxALIGN_CENTER, 5 );

    item0->Add( item1, 0, 0, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *ScorebotInputFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticBox *item2 = new wxStaticBox( parent, -1, wxT("Status") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxVERTICAL );

    wxStaticText *item3 = new wxStaticText( parent, ID_SBS_STATUS_OUT, wxT("Broadcasting on ..."), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticBox *item6 = new wxStaticBox( parent, -1, wxT("Scorebot Setup") );
    wxStaticBoxSizer *item5 = new wxStaticBoxSizer( item6, wxVERTICAL );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, wxT("Server"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxTextCtrl *item8 = new wxTextCtrl( parent, ID_SBS_SERV_IN, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item8->Enable( false );
    item5->Add( item8, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxStaticText *item9 = new wxStaticText( parent, ID_TEXT, wxT("Event Title"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item9, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxTextCtrl *item10 = new wxTextCtrl( parent, ID_SBS_TITLE_IN, wxT(""), wxDefaultPosition, wxSize(250,-1), 0 );
    item5->Add( item10, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxBoxSizer *item11 = new wxBoxSizer( wxHORIZONTAL );

    wxFlexGridSizer *item12 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item13 = new wxStaticText( parent, ID_TEXT, wxT("Channel"), wxDefaultPosition, wxDefaultSize, 0 );
    item12->Add( item13, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxStaticText *item14 = new wxStaticText( parent, ID_TEXT, wxT("Interval (sec)"), wxDefaultPosition, wxDefaultSize, 0 );
    item12->Add( item14, 0, wxLEFT|wxRIGHT|wxTOP, 5 );

    wxBoxSizer *item15 = new wxBoxSizer( wxHORIZONTAL );

    wxString *strs16 = (wxString*) NULL;
    wxChoice *item16 = new wxChoice( parent, ID_SBS_CHAN_IN, wxDefaultPosition, wxSize(120,-1), 0, strs16, 0 );
    item15->Add( item16, 0, wxALIGN_CENTER_HORIZONTAL|wxLEFT|wxBOTTOM, 5 );

    wxButton *item17 = new wxButton( parent, ID_SBS_CHAN, wxT("..."), wxDefaultPosition, wxSize(30,-1), 0 );
    item15->Add( item17, 0, wxALIGN_CENTER_HORIZONTAL|wxRIGHT|wxBOTTOM, 5 );

    item12->Add( item15, 0, wxALIGN_CENTER_HORIZONTAL, 5 );

    wxSpinCtrl *item18 = new wxSpinCtrl( parent, ID_SBS_INTER_IN, wxT("1"), wxDefaultPosition, wxSize(60,-1), 0, 1, 999, 1 );
    item12->Add( item18, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item11->Add( item12, 0, wxALIGN_CENTER_HORIZONTAL, 5 );

    item5->Add( item11, 0, wxALIGN_CENTER_VERTICAL, 5 );

    item4->Add( item5, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item20 = new wxStaticBox( parent, -1, wxT("Custom Scorebot") );
    wxStaticBoxSizer *item19 = new wxStaticBoxSizer( item20, wxVERTICAL );

    wxBoxSizer *item21 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item22 = new wxCheckBox( parent, ID_SBS_CUST_CHK, wxT("Use custom"), wxDefaultPosition, wxDefaultSize, 0 );
    item22->Enable( false );
    item21->Add( item22, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString *strs23 = (wxString*) NULL;
    wxChoice *item23 = new wxChoice( parent, ID_SBS_BNAME_IN, wxDefaultPosition, wxSize(140,-1), 0, strs23, 0 );
    item23->Enable( false );
    item21->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    item19->Add( item21, 0, wxALIGN_CENTER, 5 );

    wxStaticText *item24 = new wxStaticText( parent, ID_TEXT, wxT("Extended Options"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item24, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxString *strs25 = (wxString*) NULL;
    wxListBox *item25 = new wxListBox( parent, ID_SBS_OPTS_LST, wxDefaultPosition, wxSize(250,100), 0, strs25, wxLB_SINGLE );
    item19->Add( item25, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item4->Add( item19, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item4, 0, wxALIGN_CENTER, 5 );

    item0->Add( 20, 10, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item26 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item27 = new wxButton( parent, wxID_OK, wxT("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item27->SetDefault();
    item26->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item28 = new wxButton( parent, wxID_CANCEL, wxT("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item26->Add( item28, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *BroadcastFmtFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticBox *item2 = new wxStaticBox( parent, -1, wxT("Basic Broadcast Formatting") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxVERTICAL );

    wxBoxSizer *item3 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, 
        wxT("Basic format specifiers:\n")
        wxT("server, port, ping, hostname, map, curplayers, maxplayers, type, version\n")
        wxT("title, score_a, score_b, name_a, name_b, time \n")
        wxT("\n")
        wxT("Custom scorebots may add format specifiers."),
        wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item3, 0, wxALIGN_CENTER, 5 );

    item1->Add( 20, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item5 = new wxTextCtrl( parent, ID_BOT_FORMAT_IN, wxT(""), wxDefaultPosition, wxSize(600,-1), 0 );
    item1->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item7 = new wxStaticBox( parent, -1, wxT("Output Example") );
    wxStaticBoxSizer *item6 = new wxStaticBoxSizer( item7, wxVERTICAL );

    wxTextCtrl *item8 = new wxTextCtrl( parent, ID_BOT_EX_OUT, wxT(""), wxDefaultPosition, wxSize(600,40), wxTE_MULTILINE|wxTE_READONLY|wxHSCROLL );
    item8->SetBackgroundColour( *wxLIGHT_GREY );
    item6->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *ChannelInputFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxFlexGridSizer *item1 = new wxFlexGridSizer( 2, 0, 0 );

    wxTextCtrl *item2 = new wxTextCtrl( parent, ID_CI_IN, wxT(""), wxDefaultPosition, wxSize(100,-1), 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxLEFT|wxTOP, 5 );

    wxButton *item3 = new wxButton( parent, ID_CI_JOIN, wxT("&Join"), wxDefaultPosition, wxSize(40,-1), 0 );
    item1->Add( item3, 0, wxALIGN_CENTER|wxRIGHT|wxTOP, 5 );

    wxString *strs4 = (wxString*) NULL;
    wxListBox *item4 = new wxListBox( parent, ID_CI_LIST, wxDefaultPosition, wxSize(100,100), 0, strs4, wxLB_SINGLE );
    item1->Add( item4, 0, wxALIGN_CENTER|wxLEFT|wxTOP|wxBOTTOM, 5 );

    wxButton *item5 = new wxButton( parent, ID_CI_PART, wxT("&Part"), wxDefaultPosition, wxSize(40,-1), 0 );
    item1->Add( item5, 0, wxALIGN_CENTER_HORIZONTAL|wxRIGHT|wxTOP, 5 );

    item0->Add( item1, 0, wxALL, 5 );

    wxButton *item6 = new wxButton( parent, wxID_OK, wxT("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

// Implement menubar functions

wxMenuBar *MenuFunc()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu;
    item1->Append( wxID_EXIT, wxT("E&xit"), wxT("") );
    item0->Append( item1, wxT("&File") );
    
    wxMenu* item2 = new wxMenu;
    item2->Append( ID_SET_NAME, wxT("Set &Name..."), wxT("") );
    item2->AppendSeparator();
    item2->Append( ID_QUERY_DBG, wxT("Open &Debug Output"), wxT("View Python exceptions and other debug info") );
    item2->Append( ID_QUERY_RLD, wxT("&Reload Query Modules"), wxT("Reload the query modules and Python subsystem") );
    item2->AppendSeparator();
    item2->Append( ID_OPTIONS, wxT("&Options..."), wxT("Set Fragmon options") );
    item0->Append( item2, wxT("&Game") );
    
    wxMenu* item3 = new wxMenu;
    item3->Append( wxID_EXIT, wxT("Placeholder"), wxT("") );
    item3->AppendSeparator();
    item3->Append( ID_IRC_NICK, wxT("Change &Nick..."), wxT("") );
    item3->Append( ID_IRC_CHAN, wxT("C&hannels..."), wxT("") );
    
    wxMenu* item4 = new wxMenu;
    item4->Append( ID_IRC_BC_CONF, wxT("Co&nfigure..."), wxT("") );
    item4->AppendSeparator();
    item4->Append( ID_IRC_BC_START, wxT("&Start\tCtrl-s"), wxT("") );
    item4->Append( ID_IRC_BC_STOP, wxT("S&top\tCtrl-x"), wxT("") );
    item4->Append( ID_IRC_BC_PULSE, wxT("&Pulse\tCtrl-p"), wxT("") );
    item4->Append( ID_IRC_BC_PP, wxT("Print P&layers\tCtrl-l"), wxT("") );
    item3->Append( ID_IRC_BC, wxT("&Broadcast"), item4 );

    item0->Append( item3, wxT("&IRC") );
    
    wxMenu* item5 = new wxMenu;
    item5->Append( ID_HELP, wxT("&Fragmon Help\tF1"), wxT("") );
    item5->Append( wxID_ABOUT, wxT("&About..."), wxT("") );
    item0->Append( item5, wxT("&Help") );
    
    return item0;
}

// Implement toolbar functions

// Implement bitmap functions

wxBitmap ArrowsFunc( size_t index )
{
    if (index == 0)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "24 24 2 1",
        "  c None",
        "b c #FF0000",
        /* pixels */
        "           bb           ",
        "          bbbb          ",
        "         bbbbbb         ",
        "        bbbbbbbb        ",
        "       bbbbbbbbbb       ",
        "      bbbbbbbbbbbb      ",
        "     bbbbbbbbbbbbbb     ",
        "    bbbbbbbbbbbbbbbb    ",
        "   bbbbbbbbbbbbbbbbbb   ",
        "  bbbbbbbbbbbbbbbbbbbb  ",
        " bbbbbbbbbbbbbbbbbbbbbb ",
        "bbbbbbbbbbbbbbbbbbbbbbbb",
        "        bbbbbbbb        ",
        "        bbbbbbbb        ",
        "        bbbbbbbb        ",
        "        bbbbbbbb        ",
        "        bbbbbbbb        ",
        "        bbbbbbbb        ",
        "        bbbbbbbb        ",
        "        bbbbbbbb        ",
        "        bbbbbbbb        ",
        "        bbbbbbbb        ",
        "        bbbbbbbb        ",
        "        bbbbbbbb        "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 1)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "24 24 2 1",
        "  c None",
        "b c #FF0000",
        /* pixels */
        "        bbbbbbbb        ",
        "        bbbbbbbb        ",
        "        bbbbbbbb        ",
        "        bbbbbbbb        ",
        "        bbbbbbbb        ",
        "        bbbbbbbb        ",
        "        bbbbbbbb        ",
        "        bbbbbbbb        ",
        "        bbbbbbbb        ",
        "        bbbbbbbb        ",
        "        bbbbbbbb        ",
        "        bbbbbbbb        ",
        "bbbbbbbbbbbbbbbbbbbbbbbb",
        " bbbbbbbbbbbbbbbbbbbbbb ",
        "  bbbbbbbbbbbbbbbbbbbb  ",
        "   bbbbbbbbbbbbbbbbbb   ",
        "    bbbbbbbbbbbbbbbb    ",
        "     bbbbbbbbbbbbbb     ",
        "      bbbbbbbbbbbb      ",
        "       bbbbbbbbbb       ",
        "        bbbbbbbb        ",
        "         bbbbbb         ",
        "          bbbb          ",
        "           bb           "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 2)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "24 24 2 1",
        "  c None",
        "b c #FF0000",
        /* pixels */
        "           b            ",
        "          bb            ",
        "         bbb            ",
        "        bbbb            ",
        "       bbbbb            ",
        "      bbbbbb            ",
        "     bbbbbbb            ",
        "    bbbbbbbb            ",
        "   bbbbbbbbbbbbbbbbbbbbb",
        "  bbbbbbbbbbbbbbbbbbbbbb",
        " bbbbbbbbbbbbbbbbbbbbbbb",
        "bbbbbbbbbbbbbbbbbbbbbbbb",
        "bbbbbbbbbbbbbbbbbbbbbbbb",
        " bbbbbbbbbbbbbbbbbbbbbbb",
        "  bbbbbbbbbbbbbbbbbbbbbb",
        "   bbbbbbbbbbbbbbbbbbbbb",
        "    bbbbbbbb            ",
        "     bbbbbbb            ",
        "      bbbbbb            ",
        "       bbbbb            ",
        "        bbbb            ",
        "         bbb            ",
        "          bb            ",
        "           b            "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 3)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "24 24 2 1",
        "  c None",
        "b c #FF0000",
        /* pixels */
        "            b           ",
        "            bb          ",
        "            bbb         ",
        "            bbbb        ",
        "            bbbbb       ",
        "            bbbbbb      ",
        "            bbbbbbb     ",
        "            bbbbbbbb    ",
        "bbbbbbbbbbbbbbbbbbbbb   ",
        "bbbbbbbbbbbbbbbbbbbbbb  ",
        "bbbbbbbbbbbbbbbbbbbbbbb ",
        "bbbbbbbbbbbbbbbbbbbbbbbb",
        "bbbbbbbbbbbbbbbbbbbbbbbb",
        "bbbbbbbbbbbbbbbbbbbbbbb ",
        "bbbbbbbbbbbbbbbbbbbbbb  ",
        "bbbbbbbbbbbbbbbbbbbbb   ",
        "            bbbbbbbb    ",
        "            bbbbbbb     ",
        "            bbbbbb      ",
        "            bbbbb       ",
        "            bbbb        ",
        "            bbb         ",
        "            bb          ",
        "            b           "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    return wxNullBitmap;
}

wxBitmap SortArrowsFunc( size_t index )
{
    if ((index == 0) ||
        (index == ID_MINIDOWN))
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 2 1",
        "  c None",
        "a c Black",
        /* pixels */
        "                ",
        "                ",
        "                ",
        "                ",
        " aaaaaaaaaaaaa  ",
        "  aaaaaaaaaaa   ",
        "   aaaaaaaaa    ",
        "    aaaaaaa     ",
        "     aaaaa      ",
        "      aaa       ",
        "       a        ",
        "                ",
        "                ",
        "                ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if ((index == 1) ||
        (index == ID_MINIUP))
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 2 1",
        "  c None",
        "a c Black",
        /* pixels */
        "                ",
        "                ",
        "                ",
        "                ",
        "       a        ",
        "      aaa       ",
        "     aaaaa      ",
        "    aaaaaaa     ",
        "   aaaaaaaaa    ",
        "  aaaaaaaaaaa   ",
        " aaaaaaaaaaaaa  ",
        "                ",
        "                ",
        "                ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    return wxNullBitmap;
}

wxBitmap TeamsFunc( size_t index )
{
    if ((index == 0) ||
        (index == ID_TEAM_A))
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 2 1",
        "  c None",
        "b c #FF0000",
        /* pixels */
        "                ",
        "       b        ",
        "      bbb       ",
        "     bb bb      ",
        "     b   b      ",
        "    bb   bb     ",
        "    bb    b     ",
        "   bbbbbbbbb    ",
        "   bb      b    ",
        "   bb      b    ",
        "  bbb      bb   ",
        "  bbb      bb   ",
        " bbbb      bbb  ",
        "                ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if ((index == 1) ||
        (index == ID_TEAM_B))
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 2 1",
        "  c None",
        "b c #0000FF",
        /* pixels */
        "                ",
        "    b           ",
        "    bbbbbbb     ",
        "    b     bb    ",
        "    b      b    ",
        "    b      b    ",
        "    bb    bb    ",
        "    bbbbbbb     ",
        "    b     bb    ",
        "    b      b    ",
        "    b      b    ",
        "    bb    bb    ",
        "    bbbbbbb     ",
        "                ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if ((index == 2) ||
        (index == ID_TEAM_F))
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 3 1",
        "  c None",
        "a c #808080",
        "c c #C0C0C0",
        /* pixels */
        "                ",
        "                ",
        "    aaaaaaaa    ",
        "    aaaaaaac    ",
        "    aa          ",
        "    aa          ",
        "    aa          ",
        "    aa          ",
        "    aaaaa       ",
        "    aaaac       ",
        "    aa          ",
        "    aa          ",
        "    aa          ",
        "    aa          ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    return wxNullBitmap;
}

wxBitmap LocksFunc( size_t index )
{
    if ((index == 0) ||
        (index == ID_LOCK_ON))
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 4 1",
        "  c None",
        "a c Black",
        "b c #808080",
        "d c #FFFF00",
        /* pixels */
        "                ",
        "      aaaa      ",
        "     a    a     ",
        "     a    a     ",
        "     a    a     ",
        "     a    a     ",
        "     a    a     ",
        "   aaaaaaaaaa   ",
        "   aaaaddaaaa   ",
        "   aaaabdaaaa   ",
        "   aaaaddaaaa   ",
        "   aaaaaaaaaa   ",
        "   aaaaaaaaaa   ",
        "                ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if ((index == 1) ||
        (index == ID_LOCK_OFF))
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 2 1",
        "  c None",
        "a c #808080",
        /* pixels */
        "                ",
        " aaaa           ",
        "a    a          ",
        "a    a          ",
        "a    a          ",
        "a    a          ",
        "a    a          ",
        "   aaaaaaaaaa   ",
        "   aaaaaaaaaa   ",
        "   aaaaaaaaaa   ",
        "   aaaaaaaaaa   ",
        "   aaaaaaaaaa   ",
        "   aaaaaaaaaa   ",
        "                ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    return wxNullBitmap;
}


// End of generated file
